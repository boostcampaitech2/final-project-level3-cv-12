{"ast":null,"code":"var _jsxFileName = \"/Users/chaeyounglim/Desktop/project-canvas-frontend/src/canvas/Canvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport '../styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nfunction Canvas({\n  width,\n  height,\n  canvasRef,\n  eyeL,\n  eyeR,\n  nose,\n  mouth,\n  other,\n  undoSteps,\n  redoSteps,\n  undo,\n  redo,\n  drawingstate,\n  brushsize,\n  erasersize,\n  setUndoSteps,\n  setRedoSteps,\n  setUndo,\n  setRedo\n}) {\n  _s();\n\n  // Mouse pointer poisition\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const [isPainting, setIsPainting] = useState(false); // 좌표 얻는 함수\n\n  const getCoordinates = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    };\n  }; // canvas에 선을 긋는 함수\n\n\n  const drawLine = (originalMousePosition, newMousePosition) => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      if (drawingstate) {\n        context.strokeStyle = \"black\"; // 선 색깔\n\n        context.lineJoin = 'round'; // 선 끄트머리(?)\n\n        context.lineWidth = brushsize; // 선 굵기\n      } else {\n        context.strokeStyle = \"white\"; // 선 색깔\n\n        context.lineJoin = 'round'; // 선 끄트머리(?)\n\n        context.lineWidth = erasersize; // 선 굵기\n      }\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n      context.stroke();\n    }\n  };\n\n  const startPaint = useCallback(event => {\n    const coordinates = getCoordinates(event);\n\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n      const temp = { ...undoSteps,\n        [undo + 1]: []\n      };\n      temp[undo + 1].push({\n        coordinates\n      });\n      setUndoSteps(temp);\n    }\n  }, []);\n  const paint = useCallback(event => {\n    event.preventDefault(); // drag 방지\n\n    event.stopPropagation(); // drag 방지\n\n    if (isPainting) {\n      const newMousePosition = getCoordinates(event);\n\n      if (mousePosition && newMousePosition) {\n        drawLine(mousePosition, newMousePosition);\n        setMousePosition(newMousePosition);\n      }\n    }\n  }, [isPainting, mousePosition]);\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousedown', startPaint);\n    canvas.addEventListener('mousemove', paint);\n    canvas.addEventListener('mouseup', exitPaint);\n    canvas.addEventListener('mouseleave', exitPaint);\n    return () => {\n      // Unmount 시 이벤트 리스터 제거\n      canvas.removeEventListener('mousedown', startPaint);\n      canvas.removeEventListener('mousemove', paint);\n      canvas.removeEventListener('mouseup', exitPaint);\n      canvas.removeEventListener('mouseleave', exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      height: height,\n      width: width,\n      className: \"canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Canvas, \"2ZmFjqBTeIO7IIADJtGQS/zZri0=\");\n\n_c = Canvas;\nCanvas.defaultProps = {\n  width: 512,\n  height: 512\n};\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/chaeyounglim/Desktop/project-canvas-frontend/src/canvas/Canvas.tsx"],"names":["React","useState","useCallback","useEffect","Canvas","width","height","canvasRef","eyeL","eyeR","nose","mouth","other","undoSteps","redoSteps","undo","redo","drawingstate","brushsize","erasersize","setUndoSteps","setRedoSteps","setUndo","setRedo","mousePosition","setMousePosition","undefined","isPainting","setIsPainting","getCoordinates","event","current","canvas","x","pageX","offsetLeft","y","pageY","offsetTop","drawLine","originalMousePosition","newMousePosition","context","getContext","strokeStyle","lineJoin","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","startPaint","coordinates","temp","push","paint","preventDefault","stopPropagation","exitPaint","addEventListener","removeEventListener","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport '../styles/styles.css';\n\ninterface InputProps {\n\twidth: number;\n\theight: number;\n\tcanvasRef: React.RefObject<HTMLCanvasElement>;\n\teyeL: number;\n\teyeR: number;\n\tnose: number;\n\tmouth: number;\n\tother: number;\n\tdrawingstate: boolean;\n\tbrushsize: number;\n\terasersize: number;\n\tundoSteps: Array<Coordinate>;\n\tredoSteps: Array<Coordinate>;\n\tundo: number;\n\tredo: number;\n\tsetUndoSteps: React.Dispatch<React.SetStateAction<Array<Coordinate>>>;\n\tsetRedoSteps: React.Dispatch<React.SetStateAction<Array<Coordinate>>>;\n\tsetUndo: React.Dispatch<React.SetStateAction<number>>;\n\tsetRedo: React.Dispatch<React.SetStateAction<number>>;\n\tbackground: boolean;\n\tloading: boolean;\n\tsetLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ninterface Coordinate {\n\tx: number;\n\ty: number;\n};\n\nfunction Canvas({width, height, canvasRef, eyeL, eyeR, nose, mouth, other, undoSteps, redoSteps, undo, redo,\n\tdrawingstate, brushsize, erasersize, setUndoSteps, setRedoSteps, setUndo, setRedo} : InputProps) {\n\n\t// Mouse pointer poisition\n\tconst [mousePosition, setMousePosition] = useState<Coordinate | undefined>(undefined);\n\tconst [isPainting, setIsPainting] = useState(false);\n\n\n\t// 좌표 얻는 함수\n\tconst getCoordinates = (event: MouseEvent): Coordinate | undefined => {\n\t\tif (!canvasRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\treturn {\n\t\t\tx: event.pageX - canvas.offsetLeft,\n\t\t\ty: event.pageY - canvas.offsetTop\n\t\t};\n\t};\n\n\n\t// canvas에 선을 긋는 함수\n\tconst drawLine = (originalMousePosition: Coordinate, newMousePosition: Coordinate) => {\n\t\tif (!canvasRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\n\t\tif (context) {\n\t\t\tif (drawingstate) {\n\t\t\t\tcontext.strokeStyle = \"black\";  // 선 색깔\n\t\t\t\tcontext.lineJoin = 'round';\t// 선 끄트머리(?)\n\t\t\t\tcontext.lineWidth = brushsize;\t\t// 선 굵기\n\t\t\t} else {\n\t\t\t\tcontext.strokeStyle = \"white\";  // 선 색깔\n\t\t\t\tcontext.lineJoin = 'round';\t// 선 끄트머리(?)\n\t\t\t\tcontext.lineWidth = erasersize;\t\t// 선 굵기\n\t\t\t}\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(originalMousePosition.x, originalMousePosition.y);\n\t\t\tcontext.lineTo(newMousePosition.x, newMousePosition.y);\n\t\t\tcontext.closePath();\n\n\t\t\tcontext.stroke();\n\t\t}\n\t};\n\n\tconst startPaint = useCallback((event: MouseEvent) => {\n\t\tconst coordinates = getCoordinates(event);\n\t\tif (coordinates) {\n\t\t\tsetIsPainting(true);\n\t\t\tsetMousePosition(coordinates);\n\t\t\tconst temp: any = { ...undoSteps, [undo + 1]: []};\n\t\t\ttemp[undo + 1].push({ coordinates });\n\t\t\tsetUndoSteps(temp);\n\t\t}\n\t}, []);\n\n\tconst paint = useCallback(\n\t\t(event: MouseEvent) => {\n\t\t\tevent.preventDefault();   // drag 방지\n\t\t\tevent.stopPropagation();  // drag 방지\n\n\t\t\tif (isPainting) {\n\t\t\t\tconst newMousePosition = getCoordinates(event);\n\t\t\t\tif (mousePosition && newMousePosition) {\n\t\t\t\t\tdrawLine(mousePosition, newMousePosition);\n\t\t\t\t\tsetMousePosition(newMousePosition);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[isPainting, mousePosition]\n\t);\n\n\tconst exitPaint = useCallback(() => {\n\t  setIsPainting(false);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\n\t\tcanvas.addEventListener('mousedown', startPaint);\n\t\tcanvas.addEventListener('mousemove', paint);\n\t\tcanvas.addEventListener('mouseup', exitPaint);\n\t\tcanvas.addEventListener('mouseleave', exitPaint);\n\n\t\treturn () => {\n\t\t\t// Unmount 시 이벤트 리스터 제거\n\t\t\tcanvas.removeEventListener('mousedown', startPaint);\n\t\t\tcanvas.removeEventListener('mousemove', paint);\n\t\t\tcanvas.removeEventListener('mouseup', exitPaint);\n\t\t\tcanvas.removeEventListener('mouseleave', exitPaint);\n\t\t};\n\t}, [startPaint, paint, exitPaint]);\n\n\treturn (\n\t\t<div>\n\t\t\t<canvas ref={canvasRef} height={height} width={width} className=\"canvas\"/>\n\t\t</div>\n\t);\n}\n\nCanvas.defaultProps = {\n\twidth: 512,\n\theight: 512\n};\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/chaeyounglim/Desktop/project-canvas-frontend/src/buttons/Buttons.tsx\";\nimport '../styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nfunction Buttons({\n  canvasRef,\n  eyeL,\n  eyeR,\n  nose,\n  mouth,\n  other,\n  drawingstate,\n  undoSteps,\n  redoSteps,\n  undo,\n  redo,\n  brushsize,\n  erasersize,\n  setBrushsize,\n  setErasersize,\n  setDrawingstate,\n  setUndoSteps,\n  setRedoSteps,\n  setUndo,\n  setRedo,\n  background,\n  loading,\n  setBackground,\n  setLoading,\n  realtime,\n  setRealtime\n}) {\n  // Convert Button\n  // const convertCanvas = () => {\n  // \tif (!canvasRef.current) {\n  // \t\treturn;\n  // \t}\n  // \tconst dataURL:string = canvasRef.current.toDataURL(\"image/png\");\n  // }\n  const handleBackground = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    setBackground(!background);\n  };\n\n  const handleRealtime = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    setRealtime(!realtime);\n  };\n\n  const handleBrush = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const size = event.target.value;\n    setBrushsize(+size);\n  };\n\n  const handleEraser = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const size = event.target.value;\n    setErasersize(+size);\n  };\n\n  const modeChange = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    setDrawingstate(!drawingstate);\n  };\n\n  const clearCanvas = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n  }; // Realtime Button\n  // const undoLastOperation = () => {\n  // \tif (!canvasRef.current) { return; }\n  // \tconst ctx: CanvasRenderingContext2D |null = canvasRef.current.getContext('2d');\n  // \tif (!ctx) { return; }\n  // \tif (undo > 0) {\n  // \t\tconst data = undoSteps[undo];\n  // \t\tctx.strokeStyle = \"white\";\n  // \t\tctx.beginPath();\n  // \t\tctx.lineWidth = 5;\n  // \t\tctx.moveTo(data.x, data.y);\n  // \t\tdata.forEach((x, y) => {\n  // \t\t\tctx.lineTo(x, y);\n  // \t\t\tctx.stroke();\n  // \t\t});\n  // \tctx.closePath();\n  // \tctx.strokeStyle = \"black\";\n  // \tconst temp = {\n  // \t\t...undoSteps,\n  // \t\t[undo]: []\n  // \t};\n  // \tconst te = {\n  // \t\t...redoStep,\n  // \t\t[redo + 1]: [...data]\n  // \t  };\n  // \t  setUndo(undo - 1);\n  // \t  setRedo(redo + 1);\n  // \t  setRedoStep(te);\n  // \t  setUndoSteps(temp);\n  // \t}\n  //   };\n  //   const redoLastOperation = () => {\n  // \tif (!canvasRef.current) { return; }\n  // \tconst ctx: CanvasRenderingContext2D |null = canvasRef.current.getContext('2d');\n  // \tif (!ctx) { return; }\n  // \tif (redo > 0) {\n  // \t  const data = redoSteps[redo];\n  // \t  ctx.strokeStyle = \"black\";\n  // \t  ctx.beginPath();\n  // \t  ctx.lineWidth = 5;\n  // \t  ctx.moveTo(data.x, data.y);\n  // \t  data.forEach((item, index) => {\n  // \t\tif (index !== 0) {\n  // \t\t  ctx.lineTo(item.x, item.y);\n  // \t\t  ctx.stroke();\n  // \t\t}\n  // \t  });\n  // \t  ctx.closePath();\n  // \t  const temp = {\n  // \t\t...redoStep,\n  // \t\t[redo]: []\n  // \t  };\n  // \t  setUndo(undo + 1);\n  // \t  setRedo(redo - 1);\n  // \t  setRedoStep(temp);\n  // \t  setUndoSteps({\n  // \t\t...undoSteps,\n  // \t\t[undo + 1]: [...data]\n  // \t  });\n  // \t}\n  //   };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Buttons1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttonblocks\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Background \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: background,\n        onChange: handleBackground\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Brush size : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"paintRange\",\n        min: \"0.1\",\n        max: \"10\",\n        value: brushsize,\n        step: \"0.1\",\n        onChange: handleBrush\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Eraser size : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"eraseRange\",\n        min: \"0.1\",\n        max: \"100\",\n        value: erasersize,\n        step: \"0.1\",\n        onChange: handleEraser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttonblocks\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"REAL TIME \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: modeChange,\n        children: drawingstate ? \"BRUSH\" : \"ERASER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttonblocks\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Redo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Buttons;\nexport default Buttons;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buttons\");","map":{"version":3,"sources":["/Users/chaeyounglim/Desktop/project-canvas-frontend/src/buttons/Buttons.tsx"],"names":["Buttons","canvasRef","eyeL","eyeR","nose","mouth","other","drawingstate","undoSteps","redoSteps","undo","redo","brushsize","erasersize","setBrushsize","setErasersize","setDrawingstate","setUndoSteps","setRedoSteps","setUndo","setRedo","background","loading","setBackground","setLoading","realtime","setRealtime","handleBackground","event","current","handleRealtime","handleBrush","size","target","value","handleEraser","modeChange","clearCanvas","canvas","getContext","clearRect","width","height"],"mappings":"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","sourcesContent":["import '../styles/styles.css';\n\ninterface Coordinate {\n\tx: number;\n\ty: number;\n};\n\ninterface InputProps {\n\tcanvasRef: React.RefObject<HTMLCanvasElement>;\n\teyeL: number;\n\teyeR: number;\n\tnose: number;\n\tmouth: number;\n\tother: number;\n\tdrawingstate: boolean;\n\tbrushsize: number;\n\terasersize: number;\n\tsetBrushsize: React.Dispatch<React.SetStateAction<number>>;\n\tsetErasersize: React.Dispatch<React.SetStateAction<number>>;\n\tsetDrawingstate: React.Dispatch<React.SetStateAction<boolean>>;\n\tundoSteps: Array<Coordinate>;\n\tredoSteps: Array<Coordinate>;\n\tundo: number;\n\tredo: number;\n\tsetUndoSteps: React.Dispatch<React.SetStateAction<Array<Coordinate>>>;\n\tsetRedoSteps: React.Dispatch<React.SetStateAction<Array<Coordinate>>>;\n\tsetUndo: React.Dispatch<React.SetStateAction<number>>;\n\tsetRedo: React.Dispatch<React.SetStateAction<number>>;\n\tbackground: boolean;\n\tloading: boolean;\n\tsetBackground: React.Dispatch<React.SetStateAction<boolean>>;\n\tsetLoading: React.Dispatch<React.SetStateAction<boolean>>;\n\trealtime: boolean;\n\tsetRealtime: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\n\nfunction Buttons({canvasRef, eyeL, eyeR, nose, mouth, other, drawingstate, undoSteps, redoSteps, undo, redo,\n\tbrushsize, erasersize, setBrushsize, setErasersize, setDrawingstate, setUndoSteps, setRedoSteps, setUndo, setRedo,\n\tbackground, loading, setBackground, setLoading, realtime, setRealtime} : InputProps) {\n\n\t// Convert Button\n\t// const convertCanvas = () => {\n\t// \tif (!canvasRef.current) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst dataURL:string = canvasRef.current.toDataURL(\"image/png\");\n\t// }\n\n\tconst handleBackground = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tsetBackground(!background);\n\t}\n\tconst handleRealtime = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tsetRealtime(!realtime);\n\t}\n\tconst handleBrush = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst size:string = event.target.value;\n\t\tsetBrushsize(+size);\n\t}\n\tconst handleEraser = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst size:string = event.target.value;\n\t\tsetErasersize(+size);\n\t}\n\n\tconst modeChange = () => {\n\t\tif (!canvasRef.current) { return; }\n\t\tsetDrawingstate(!drawingstate);\n\t}\n\n\tconst clearCanvas = () => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tcanvas.getContext('2d')!!.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\t// Realtime Button\n\n\t// const undoLastOperation = () => {\n\t// \tif (!canvasRef.current) { return; }\n\t// \tconst ctx: CanvasRenderingContext2D |null = canvasRef.current.getContext('2d');\n\t// \tif (!ctx) { return; }\n\t// \tif (undo > 0) {\n\t// \t\tconst data = undoSteps[undo];\n\t// \t\tctx.strokeStyle = \"white\";\n\t// \t\tctx.beginPath();\n\t// \t\tctx.lineWidth = 5;\n\t// \t\tctx.moveTo(data.x, data.y);\n\t// \t\tdata.forEach((x, y) => {\n\t// \t\t\tctx.lineTo(x, y);\n\t// \t\t\tctx.stroke();\n\t// \t\t});\n\t// \tctx.closePath();\n\t// \tctx.strokeStyle = \"black\";\n\t// \tconst temp = {\n\t// \t\t...undoSteps,\n\t// \t\t[undo]: []\n\t// \t};\n\t// \tconst te = {\n\t// \t\t...redoStep,\n\t// \t\t[redo + 1]: [...data]\n\t// \t  };\n\t// \t  setUndo(undo - 1);\n\t// \t  setRedo(redo + 1);\n\t// \t  setRedoStep(te);\n\t// \t  setUndoSteps(temp);\n\t// \t}\n\t//   };\n\n\t//   const redoLastOperation = () => {\n\t// \tif (!canvasRef.current) { return; }\n\t// \tconst ctx: CanvasRenderingContext2D |null = canvasRef.current.getContext('2d');\n\t// \tif (!ctx) { return; }\n\t// \tif (redo > 0) {\n\t// \t  const data = redoSteps[redo];\n\t// \t  ctx.strokeStyle = \"black\";\n\t// \t  ctx.beginPath();\n\t// \t  ctx.lineWidth = 5;\n\t// \t  ctx.moveTo(data.x, data.y);\n\t// \t  data.forEach((item, index) => {\n\t// \t\tif (index !== 0) {\n\t// \t\t  ctx.lineTo(item.x, item.y);\n\t// \t\t  ctx.stroke();\n\t// \t\t}\n\t// \t  });\n\t// \t  ctx.closePath();\n\t// \t  const temp = {\n\t// \t\t...redoStep,\n\t// \t\t[redo]: []\n\t// \t  };\n\t// \t  setUndo(undo + 1);\n\t// \t  setRedo(redo - 1);\n\t// \t  setRedoStep(temp);\n\t// \t  setUndoSteps({\n\t// \t\t...undoSteps,\n\t// \t\t[undo + 1]: [...data]\n\t// \t  });\n\t// \t}\n\t//   };\n\n\treturn (\n\t\t<div className='Buttons1'>\n\t\t\t<div className='Buttonblocks'>\n\t\t\t\t<span> Background </span>\n\t\t\t\t<input type=\"checkbox\" checked={background} onChange={handleBackground}></input>\n\t\t\t\t<span> Brush size : </span>\n\t\t\t\t<input type=\"range\" id=\"paintRange\" min=\"0.1\" max=\"10\" value={brushsize} step=\"0.1\" onChange={handleBrush}/>\n\t\t\t\t<span> Eraser size : </span>\n\t\t\t\t<input type=\"range\" id=\"eraseRange\" min=\"0.1\" max=\"100\" value={erasersize} step=\"0.1\" onChange={handleEraser}/>\n\t\t\t</div>\n\t\t\t<div className='Buttonblocks'>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tREAL TIME {}\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tConvert\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={modeChange}>\n\t\t\t\t\t{drawingstate ? \"BRUSH\" : \"ERASER\"}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div className='Buttonblocks'>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tClear\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tUndo\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tRedo\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Buttons;"]},"metadata":{},"sourceType":"module"}
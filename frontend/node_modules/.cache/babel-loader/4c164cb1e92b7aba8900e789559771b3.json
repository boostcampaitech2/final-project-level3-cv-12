{"ast":null,"code":"var _jsxFileName = \"/Users/chaeyounglim/Desktop/project-canvas-frontend/src/buttons/Buttons.tsx\",\n    _s = $RefreshSig$();\n\nimport '../styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Buttons({\n  canvasRef,\n  eyeL,\n  eyeR,\n  nose,\n  mouth,\n  other,\n  drawingstate,\n  brushsize,\n  erasersize,\n  setBrushsize,\n  setErasersize,\n  setDrawingstate\n}) {\n  _s();\n\n  // Convert Button\n  // const convertCanvas = () => {\n  // \tif (!canvasRef.current) {\n  // \t\treturn;\n  // \t}\n  // \tconst dataURL:string = canvasRef.current.toDataURL(\"image/png\");\n  // }\n  const handleBrush = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const size = event.target.value;\n    setBrushsize(+size);\n  };\n\n  const handleEraser = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const size = event.target.value;\n    setErasersize(+size);\n  };\n\n  const modeChange = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    setDrawingstate(!drawingstate);\n  };\n\n  const clearCanvas = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n  }; // Realtime Button\n\n\n  const [undoSteps, setUndoSteps] = useState({});\n  const [redoStep, setRedoStep] = useState({});\n  const [undo, setUndo] = useState(0);\n  const [redo, setRedo] = useState(0);\n\n  const undoLastOperation = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    if (undo > 0) {\n      const data = undoSteps[undo];\n      ctx.strokeStyle = \"white\";\n      ctx.beginPath();\n      ctx.lineWidth = 5;\n      ctx.moveTo(data[0].offsetX, data[0].offsetY);\n      data.forEach((item, index) => {\n        if (index !== 0) {\n          ctx.lineTo(item.offsetX, item.offsetY);\n          ctx.stroke();\n        }\n      });\n      ctx.closePath();\n      ctx.strokeStyle = \"black\";\n      const temp = { ...undoSteps,\n        [undo]: []\n      };\n      const te = { ...redoStep,\n        [redo + 1]: [...data]\n      };\n      setUndo(undo - 1);\n      setRedo(redo + 1);\n      setRedoStep(te);\n      setUndoSteps(temp);\n    }\n  };\n\n  const redoLastOperation = () => {\n    if (redo > 0) {\n      const data = redoStep[redo];\n      ctx.strokeStyle = \"black\";\n      ctx.beginPath();\n      ctx.lineWidth = 5;\n      ctx.moveTo(data[0].offsetX, data[0].offsetY);\n      data.forEach((item, index) => {\n        if (index !== 0) {\n          ctx.lineTo(item.offsetX, item.offsetY);\n          ctx.stroke();\n        }\n      });\n      ctx.closePath();\n      const temp = { ...redoStep,\n        [redo]: []\n      };\n      setUndo(undo + 1);\n      setRedo(redo - 1);\n      setRedoStep(temp);\n      setUndoSteps({ ...undoSteps,\n        [undo + 1]: [...data]\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Buttons1\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttonblocks\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Brush size : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"paintRange\",\n        min: \"0.1\",\n        max: \"10\",\n        value: brushsize,\n        step: \"0.1\",\n        onChange: handleBrush\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Paint size : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"eraseRange\",\n        min: \"0.1\",\n        max: \"10\",\n        value: erasersize,\n        step: \"0.1\",\n        onChange: handleEraser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttonblocks\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Real Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: modeChange,\n        children: drawingstate ? \"BRUSH\" : \"ERASER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttonblocks\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: undohandling,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"fill-current w-4 h-4 mr-2\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          viewBox: \"0 0 20 20\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 104\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Download\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Buttons, \"LTaDsZoLS8mN2f8I8kh00M2pysQ=\");\n\n_c = Buttons;\nexport default Buttons;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buttons\");","map":{"version":3,"sources":["/Users/chaeyounglim/Desktop/project-canvas-frontend/src/buttons/Buttons.tsx"],"names":["Buttons","canvasRef","eyeL","eyeR","nose","mouth","other","drawingstate","brushsize","erasersize","setBrushsize","setErasersize","setDrawingstate","handleBrush","event","current","size","target","value","handleEraser","modeChange","clearCanvas","canvas","getContext","clearRect","width","height","undoSteps","setUndoSteps","useState","redoStep","setRedoStep","undo","setUndo","redo","setRedo","undoLastOperation","ctx","data","strokeStyle","beginPath","lineWidth","moveTo","offsetX","offsetY","forEach","item","index","lineTo","stroke","closePath","temp","te","redoLastOperation","undohandling"],"mappings":"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","sourcesContent":["import '../styles/styles.css';\n\ninterface InputProps {\n\tcanvasRef: React.RefObject<HTMLCanvasElement>;\n\teyeL: number;\n\teyeR: number;\n\tnose: number;\n\tmouth: number;\n\tother: number;\n\tdrawingstate: Boolean;\n\tbrushsize: number;\n\terasersize: number;\n\tsetBrushsize: React.Dispatch<React.SetStateAction<number>>;\n\tsetErasersize: React.Dispatch<React.SetStateAction<number>>;\n\tsetDrawingstate: React.Dispatch<React.SetStateAction<Boolean>>;\n}\n\nfunction Buttons({canvasRef, eyeL, eyeR, nose, mouth, other, drawingstate,\n\tbrushsize, erasersize, setBrushsize, setErasersize, setDrawingstate} : InputProps) {\n\n\t// Convert Button\n\t// const convertCanvas = () => {\n\t// \tif (!canvasRef.current) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst dataURL:string = canvasRef.current.toDataURL(\"image/png\");\n\t// }\n\n\tconst handleBrush = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst size:string = event.target.value;\n\t\tsetBrushsize(+size);\n\t}\n\tconst handleEraser = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst size:string = event.target.value;\n\t\tsetErasersize(+size);\n\t}\n\n\tconst modeChange = () => {\n\t\tif (!canvasRef.current) { return; }\n\t\tsetDrawingstate(!drawingstate);\n\t}\n\n\tconst clearCanvas = () => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tcanvas.getContext('2d')!!.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\t// Realtime Button\n\n\tconst [undoSteps, setUndoSteps] = useState({});\n\tconst [redoStep, setRedoStep] = useState({});\n\tconst [undo, setUndo] = useState(0);\n\tconst [redo, setRedo] = useState(0);\n\tconst undoLastOperation = () => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tconst ctx = canvas.getContext('2d');\n\t\tif (undo > 0) {\n\t\t  const data = undoSteps[undo];\n\t\t  ctx.strokeStyle = \"white\";\n\t\t  ctx.beginPath();\n\t\t  ctx.lineWidth = 5;\n\t\t  ctx.moveTo(data[0].offsetX, data[0].offsetY);\n\t\t  data.forEach((item, index) => {\n\t\t\tif (index !== 0) {\n\t\t\t  ctx.lineTo(item.offsetX, item.offsetY);\n\t\t\t  ctx.stroke();\n\t\t\t}\n\t\t  });\n\t\t  ctx.closePath();\n\t\t  ctx.strokeStyle = \"black\";\n\t\t  const temp = {\n\t\t\t...undoSteps,\n\t\t\t[undo]: []\n\t\t  };\n\t\t  const te = {\n\t\t\t...redoStep,\n\t\t\t[redo + 1]: [...data]\n\t\t  };\n\t\t  setUndo(undo - 1);\n\t\t  setRedo(redo + 1);\n\t\t  setRedoStep(te);\n\t\t  setUndoSteps(temp);\n\t\t}\n\t  };\n\n\t  const redoLastOperation = () => {\n\t\tif (redo > 0) {\n\t\t  const data = redoStep[redo];\n\t\t  ctx.strokeStyle = \"black\";\n\t\t  ctx.beginPath();\n\t\t  ctx.lineWidth = 5;\n\t\t  ctx.moveTo(data[0].offsetX, data[0].offsetY);\n\t\t  data.forEach((item, index) => {\n\t\t\tif (index !== 0) {\n\t\t\t  ctx.lineTo(item.offsetX, item.offsetY);\n\t\t\t  ctx.stroke();\n\t\t\t}\n\t\t  });\n\t\t  ctx.closePath();\n\t\t  const temp = {\n\t\t\t...redoStep,\n\t\t\t[redo]: []\n\t\t  };\n\t\t  setUndo(undo + 1);\n\t\t  setRedo(redo - 1);\n\t\t  setRedoStep(temp);\n\t\t  setUndoSteps({\n\t\t\t...undoSteps,\n\t\t\t[undo + 1]: [...data]\n\t\t  });\n\t\t}\n\t  };\n\n\treturn (\n\t\t<div className='Buttons1'>\n\t\t\t<div className='Buttonblocks'>\n\t\t\t\t<span> Brush size : </span>\n\t\t\t\t<input type=\"range\" id=\"paintRange\" min=\"0.1\" max=\"10\" value={brushsize} step=\"0.1\" onChange={handleBrush}/>\n\t\t\t\t<span> Paint size : </span>\n\t\t\t\t<input type=\"range\" id=\"eraseRange\" min=\"0.1\" max=\"10\" value={erasersize} step=\"0.1\" onChange={handleEraser}/>\n\t\t\t</div>\n\t\t\t<div className='Buttonblocks'>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tReal Time\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tConvert\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={modeChange}>\n\t\t\t\t\t{drawingstate ? \"BRUSH\" : \"ERASER\"}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div className='Buttonblocks'>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tClear\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={undohandling}>\n\t\t\t\tUndo\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\">\n\t\t\t\t\t<svg className=\"fill-current w-4 h-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z\"/></svg>\n\t\t\t\t\t<span>Download</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Buttons;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/chaeyounglim/Desktop/project-canvas-frontend/src/canvas/Canvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport '../styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nfunction Canvas({\n  width,\n  height,\n  canvasRef,\n  eyeLRef,\n  eyeRRef,\n  noseRef,\n  mouthRef,\n  otherRef\n}) {\n  _s();\n\n  const brushsize = useRef(5);\n  const erasersize = useRef(5);\n  const drawingstate = useRef(true); // Mouse pointer poisition\n\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const [isPainting, setIsPainting] = useState(false); // 좌표 얻는 함수\n\n  const getCoordinates = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    };\n  }; // Brush bar\n\n\n  const handleBrush = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const size = event.target.value;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      context.lineWidth = +size;\n    }\n  }; // canvas에 선을 긋는 함수\n\n\n  const drawLine = (originalMousePosition, newMousePosition) => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      if (drawingstate.current) {\n        context.strokeStyle = \"black\"; // 선 색깔\n\n        context.lineJoin = 'round'; // 선 끄트머리(?)\n\n        context.lineWidth = brushsize.current; // 선 굵기\n      } else {\n        context.strokeStyle = \"white\"; // 선 색깔\n\n        context.lineJoin = 'round'; // 선 끄트머리(?)\n\n        context.lineWidth = erasersize.current; // 선 굵기\n      }\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n      context.stroke();\n    }\n  };\n\n  const startPaint = useCallback(event => {\n    const coordinates = getCoordinates(event);\n\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n    }\n  }, []);\n  const paint = useCallback(event => {\n    event.preventDefault(); // drag 방지\n\n    event.stopPropagation(); // drag 방지\n\n    if (isPainting) {\n      const newMousePosition = getCoordinates(event);\n\n      if (mousePosition && newMousePosition) {\n        drawLine(mousePosition, newMousePosition);\n        setMousePosition(newMousePosition);\n      }\n    }\n  }, [isPainting, mousePosition]);\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousedown', startPaint);\n    canvas.addEventListener('mousemove', paint);\n    canvas.addEventListener('mouseup', exitPaint);\n    canvas.addEventListener('mouseleave', exitPaint);\n    return () => {\n      // Unmount 시 이벤트 리스터 제거\n      canvas.removeEventListener('mousedown', startPaint);\n      canvas.removeEventListener('mousemove', paint);\n      canvas.removeEventListener('mouseup', exitPaint);\n      canvas.removeEventListener('mouseleave', exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]); // Realtime Button\n  // Convert Button\n  // Clear Button\n\n  const clearCanvas = () => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);\n  }; // Undo Button\n  // const undoLastOperation = () => {\n  // \tif (undo > 0) {\n  // \t  const data = undoSteps[undo];\n  // \t  contextRef.current.strokeStyle = \"white\";\n  // \t  contextRef.current.beginPath();\n  // \t  contextRef.current.lineWidth = 5;\n  // \t  contextRef.current.moveTo(data[0].offsetX, data[0].offsetY);\n  // \t  data.forEach((item, index) => {\n  // \t\tif (index !== 0) {\n  // \t\t  contextRef.current.lineTo(item.offsetX, item.offsetY);\n  // \t\t  contextRef.current.stroke();\n  // \t\t}\n  // \t  });\n  // \t  contextRef.current.closePath();\n  // \t  contextRef.current.strokeStyle = \"black\";\n  // \t  const temp = {\n  // \t\t...undoSteps,\n  // \t\t[undo]: []\n  // \t  };\n  // \t  const te = {\n  // \t\t...redoStep,\n  // \t\t[redo + 1]: [...data]\n  // \t  };\n  // \t  setUndo(undo - 1);\n  // \t  setRedo(redo + 1);\n  // \t  setRedoStep(te);\n  // \t  setUndoSteps(temp);\n  // \t}\n  //   };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Block\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Real Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\",\n        onClick: clearCanvas,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      height: height,\n      width: width,\n      className: \"canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Canvas, \"HkTeTt3r7DQn7gSB6JeNoEymLMM=\");\n\n_c = Canvas;\nCanvas.defaultProps = {\n  width: 512,\n  height: 512\n};\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/chaeyounglim/Desktop/project-canvas-frontend/src/canvas/Canvas.tsx"],"names":["React","useRef","useState","useCallback","useEffect","Canvas","width","height","canvasRef","eyeLRef","eyeRRef","noseRef","mouthRef","otherRef","brushsize","erasersize","drawingstate","mousePosition","setMousePosition","undefined","isPainting","setIsPainting","getCoordinates","event","current","canvas","x","pageX","offsetLeft","y","pageY","offsetTop","handleBrush","size","target","value","context","getContext","lineWidth","drawLine","originalMousePosition","newMousePosition","strokeStyle","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","startPaint","coordinates","paint","preventDefault","stopPropagation","exitPaint","addEventListener","removeEventListener","clearCanvas","clearRect","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport '../styles/styles.css';\n\ninterface InputProps {\n\twidth: number;\n\theight: number;\n\tcanvasRef: React.RefObject<HTMLCanvasElement>;\n\teyeLRef: React.MutableRefObject<number>;\n\teyeRRef: React.MutableRefObject<number>;\n\tnoseRef: React.MutableRefObject<number>;\n\tmouthRef: React.MutableRefObject<number>;\n\totherRef: React.MutableRefObject<number>;\n}\n\ninterface Coordinate {\n\tx: number;\n\ty: number;\n};\n\nfunction Canvas({width, height, canvasRef, eyeLRef, eyeRRef, noseRef, mouthRef, otherRef} : InputProps) {\n\n\tconst brushsize = useRef<number>(5);\n\tconst erasersize = useRef<number>(5);\n\tconst drawingstate = useRef<Boolean>(true);\n\t// Mouse pointer poisition\n\tconst [mousePosition, setMousePosition] = useState<Coordinate | undefined>(undefined);\n\tconst [isPainting, setIsPainting] = useState(false);\n\n\n\t// 좌표 얻는 함수\n\tconst getCoordinates = (event: MouseEvent): Coordinate | undefined => {\n\t\tif (!canvasRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\treturn {\n\t\t\tx: event.pageX - canvas.offsetLeft,\n\t\t\ty: event.pageY - canvas.offsetTop\n\t\t};\n\t};\n\n\t// Brush bar\n\tconst handleBrush = (event: React.ChangeEvent<HTMLInputElement>) : number | undefined => {\n\t\tif (!canvasRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tconst size:string = event.target.value;\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.lineWidth = +size;\n\t\t}\n\t}\n\n\t// canvas에 선을 긋는 함수\n\tconst drawLine = (originalMousePosition: Coordinate, newMousePosition: Coordinate) => {\n\t  if (!canvasRef.current) {\n\t\treturn;\n\t  }\n\t  const canvas: HTMLCanvasElement = canvasRef.current;\n\t  const context = canvas.getContext('2d');\n\n\t  if (context) {\n\t\tif (drawingstate.current) {\n\t\t\tcontext.strokeStyle = \"black\";  // 선 색깔\n\t\t\tcontext.lineJoin = 'round';\t// 선 끄트머리(?)\n\t\t\tcontext.lineWidth = brushsize.current;\t\t// 선 굵기\n\t\t} else {\n\t\t\tcontext.strokeStyle = \"white\";  // 선 색깔\n\t\t\tcontext.lineJoin = 'round';\t// 선 끄트머리(?)\n\t\t\tcontext.lineWidth = erasersize.current;\t\t// 선 굵기\n\t\t}\n\n\t\tcontext.beginPath();\n\t\tcontext.moveTo(originalMousePosition.x, originalMousePosition.y);\n\t\tcontext.lineTo(newMousePosition.x, newMousePosition.y);\n\t\tcontext.closePath();\n\n\t\tcontext.stroke();\n\t  }\n\t};\n\n\tconst startPaint = useCallback((event: MouseEvent) => {\n\t  const coordinates = getCoordinates(event);\n\t  if (coordinates) {\n\t\tsetIsPainting(true);\n\t\tsetMousePosition(coordinates);\n\t  }\n\t}, []);\n\n\tconst paint = useCallback(\n\t  (event: MouseEvent) => {\n\t\tevent.preventDefault();   // drag 방지\n\t\tevent.stopPropagation();  // drag 방지\n\n\t\tif (isPainting) {\n\t\t  const newMousePosition = getCoordinates(event);\n\t\t  if (mousePosition && newMousePosition) {\n\t\t\tdrawLine(mousePosition, newMousePosition);\n\t\t\tsetMousePosition(newMousePosition);\n\t\t  }\n\t\t}\n\t  },\n\t  [isPainting, mousePosition]\n\t);\n\n\tconst exitPaint = useCallback(() => {\n\t  setIsPainting(false);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!canvasRef.current) {\n\t\t  return;\n\t\t}\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\n\t\tcanvas.addEventListener('mousedown', startPaint);\n\t\tcanvas.addEventListener('mousemove', paint);\n\t\tcanvas.addEventListener('mouseup', exitPaint);\n\t\tcanvas.addEventListener('mouseleave', exitPaint);\n\n\t\treturn () => {\n\t\t  // Unmount 시 이벤트 리스터 제거\n\t\t  canvas.removeEventListener('mousedown', startPaint);\n\t\t  canvas.removeEventListener('mousemove', paint);\n\t\t  canvas.removeEventListener('mouseup', exitPaint);\n\t\t  canvas.removeEventListener('mouseleave', exitPaint);\n\t\t};\n\t  }, [startPaint, paint, exitPaint]);\n\n\n\t// Realtime Button\n\n\t// Convert Button\n\n\t// Clear Button\n\tconst clearCanvas = () => {\n\t\tif (!canvasRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tcanvas.getContext('2d')!!.clearRect(0, 0, canvas.width, canvas.height);\n\t}\n\n\t// Undo Button\n\n\t// const undoLastOperation = () => {\n\t// \tif (undo > 0) {\n\t// \t  const data = undoSteps[undo];\n\t// \t  contextRef.current.strokeStyle = \"white\";\n\t// \t  contextRef.current.beginPath();\n\t// \t  contextRef.current.lineWidth = 5;\n\t// \t  contextRef.current.moveTo(data[0].offsetX, data[0].offsetY);\n\t// \t  data.forEach((item, index) => {\n\t// \t\tif (index !== 0) {\n\t// \t\t  contextRef.current.lineTo(item.offsetX, item.offsetY);\n\t// \t\t  contextRef.current.stroke();\n\t// \t\t}\n\t// \t  });\n\t// \t  contextRef.current.closePath();\n\t// \t  contextRef.current.strokeStyle = \"black\";\n\t// \t  const temp = {\n\t// \t\t...undoSteps,\n\t// \t\t[undo]: []\n\t// \t  };\n\t// \t  const te = {\n\t// \t\t...redoStep,\n\t// \t\t[redo + 1]: [...data]\n\t// \t  };\n\t// \t  setUndo(undo - 1);\n\t// \t  setRedo(redo + 1);\n\t// \t  setRedoStep(te);\n\t// \t  setUndoSteps(temp);\n\t// \t}\n\t//   };\n\n\treturn (\n\t\t<div className=\"Block\">\n\t\t\t<div className='Buttons'>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tReal Time\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tConvert\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tClear\n\t\t\t\t</button>\n\t\t\t\t<button className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\" onClick={clearCanvas}>\n\t\t\t\tUndo\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<canvas ref={canvasRef} height={height} width={width} className=\"canvas\"/>\n\t\t</div>\n\t);\n}\n\nCanvas.defaultProps = {\n\twidth: 512,\n\theight: 512\n};\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/chaeyounglim/Desktop/project-canvas-frontend/src/canvas/Canvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport '../styles/styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n;\n\nfunction Canvas({\n  width,\n  height,\n  canvasRef,\n  eyeL,\n  eyeR,\n  nose,\n  mouth,\n  other,\n  undoSteps,\n  undo,\n  redo,\n  drawingstate,\n  brushsize,\n  erasersize,\n  setUndo,\n  setRedo,\n  background,\n  loading,\n  setLoading,\n  realtime,\n  fetchImage\n}) {\n  _s();\n\n  // Mouse pointer poisition\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const [isPainting, setIsPainting] = useState(false); // 좌표 얻는 함수\n\n  const getCoordinates = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const parent = canvas.parentElement;\n\n    if (!parent) {\n      return;\n    }\n\n    return {\n      x: event.pageX - parent.offsetLeft,\n      y: event.pageY - parent.offsetTop\n    };\n  }; // canvas에 선을 긋는 함수\n\n\n  const drawLine = (originalMousePosition, newMousePosition) => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      if (drawingstate) {\n        context.strokeStyle = \"black\"; // 선 색깔\n\n        context.lineJoin = 'round'; // 선 끄트머리(?)\n\n        context.lineWidth = brushsize; // 선 굵기\n      } else {\n        context.strokeStyle = \"white\"; // 선 색깔\n\n        context.lineJoin = 'round'; // 선 끄트머리(?)\n\n        context.lineWidth = erasersize; // 선 굵기\n      }\n\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n      context.stroke();\n      let tmpr = {\n        ox: originalMousePosition.x,\n        oy: originalMousePosition.y,\n        nx: originalMousePosition.x,\n        ny: originalMousePosition.y,\n        s: drawingstate ? brushsize : erasersize,\n        c: drawingstate\n      };\n\n      if (undoSteps.length <= undo) {\n        const temp = { ...undoSteps[undo]\n        };\n        undoSteps.push(temp);\n        console.log(tmpr);\n        console.log(undo);\n        console.log(undoSteps[undo]);\n        undoSteps[undo].push(tmpr);\n      }\n\n      undoSteps[undo].push(tmpr);\n    }\n  };\n\n  const startPaint = useCallback(event => {\n    const coordinates = getCoordinates(event);\n\n    if (coordinates) {\n      setIsPainting(true);\n      setMousePosition(coordinates);\n    }\n  }, []);\n  const paint = useCallback(event => {\n    event.preventDefault(); // drag 방지\n\n    event.stopPropagation(); // drag 방지\n\n    if (isPainting) {\n      const newMousePosition = getCoordinates(event);\n\n      if (mousePosition && newMousePosition) {\n        drawLine(mousePosition, newMousePosition);\n        setMousePosition(newMousePosition);\n      }\n    }\n  }, [isPainting, mousePosition]);\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n    setUndo(undo + 1);\n  }, []);\n  useEffect(() => {\n    if (isPainting) {\n      return;\n    }\n\n    if (realtime === true) {\n      fetchImage();\n    }\n\n    ;\n  }, [isPainting]);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      context.fillStyle = \"white\"; // 선 색깔\n\n      context.fillRect(0, 0, 512, 512);\n    }\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousedown', startPaint);\n    canvas.addEventListener('mousemove', paint);\n    canvas.addEventListener('mouseup', exitPaint);\n    canvas.addEventListener('mouseleave', exitPaint);\n    return () => {\n      // Unmount 시 이벤트 리스터 제거\n      canvas.removeEventListener('mousedown', startPaint);\n      canvas.removeEventListener('mousemove', paint);\n      canvas.removeEventListener('mouseup', exitPaint);\n      canvas.removeEventListener('mouseleave', exitPaint);\n    };\n  }, [startPaint, paint, exitPaint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvasBlock\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      height: height,\n      width: width,\n      className: \"canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 4\n    }, this), background ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 18\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Canvas, \"DEZ40ZSkUxIL+jkI1RGi0quEV2U=\");\n\n_c = Canvas;\nCanvas.defaultProps = {\n  width: 512,\n  height: 512\n};\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/chaeyounglim/Desktop/project-canvas-frontend/src/canvas/Canvas.tsx"],"names":["React","useState","useCallback","useEffect","Canvas","width","height","canvasRef","eyeL","eyeR","nose","mouth","other","undoSteps","undo","redo","drawingstate","brushsize","erasersize","setUndo","setRedo","background","loading","setLoading","realtime","fetchImage","mousePosition","setMousePosition","undefined","isPainting","setIsPainting","getCoordinates","event","current","canvas","parent","parentElement","x","pageX","offsetLeft","y","pageY","offsetTop","drawLine","originalMousePosition","newMousePosition","context","getContext","strokeStyle","lineJoin","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","tmpr","ox","oy","nx","ny","s","c","length","temp","push","console","log","startPaint","coordinates","paint","preventDefault","stopPropagation","exitPaint","fillStyle","fillRect","addEventListener","removeEventListener","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport '../styles/styles.css';\n\ninterface InputProps {\n\twidth: number;\n\theight: number;\n\tcanvasRef: React.RefObject<HTMLCanvasElement>;\n\teyeL: number;\n\teyeR: number;\n\tnose: number;\n\tmouth: number;\n\tother: number;\n\tdrawingstate: boolean;\n\tbrushsize: number;\n\terasersize: number;\n\tundoSteps: Array<Array<Record>>;\n\tundo: number;\n\tredo: number;\n\tsetUndo: React.Dispatch<React.SetStateAction<number>>;\n\tsetRedo: React.Dispatch<React.SetStateAction<number>>;\n\tbackground: boolean;\n\tloading: boolean;\n\tsetLoading: React.Dispatch<React.SetStateAction<boolean>>;\n\trealtime: boolean;\n\tfetchImage: () => void;\n}\n\ninterface Coordinate {\n\tx: number;\n\ty: number;\n};\n\ninterface Record {\n\tox: number;\n\toy: number;\n\tnx: number;\n\tny: number;\n\tc: boolean;\n\ts: number;\n};\n\nfunction Canvas({width, height, canvasRef, eyeL, eyeR, nose, mouth, other, undoSteps, undo, redo,\n\tdrawingstate, brushsize, erasersize, setUndo, setRedo,\n\tbackground, loading, setLoading, realtime, fetchImage} : InputProps) {\n\n\t// Mouse pointer poisition\n\tconst [mousePosition, setMousePosition] = useState<Coordinate | undefined>(undefined);\n\tconst [isPainting, setIsPainting] = useState(false);\n\n\t// 좌표 얻는 함수\n\tconst getCoordinates = (event: MouseEvent): Coordinate | undefined => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tconst parent: HTMLElement | null = canvas.parentElement;\n\t\tif (!parent) { return; }\n\t\treturn {\n\t\t\tx: event.pageX - parent.offsetLeft,\n\t\t\ty: event.pageY - parent.offsetTop\n\t\t};\n\t};\n\n\t// canvas에 선을 긋는 함수\n\tconst drawLine = (originalMousePosition: Coordinate, newMousePosition: Coordinate) => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tconst context = canvas.getContext('2d');\n\n\t\tif (context) {\n\t\t\tif (drawingstate) {\n\t\t\t\tcontext.strokeStyle = \"black\";  // 선 색깔\n\t\t\t\tcontext.lineJoin = 'round';\t// 선 끄트머리(?)\n\t\t\t\tcontext.lineWidth = brushsize;\t\t// 선 굵기\n\t\t\t} else {\n\t\t\t\tcontext.strokeStyle = \"white\";  // 선 색깔\n\t\t\t\tcontext.lineJoin = 'round';\t// 선 끄트머리(?)\n\t\t\t\tcontext.lineWidth = erasersize;\t\t// 선 굵기\n\t\t\t}\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(originalMousePosition.x, originalMousePosition.y);\n\t\t\tcontext.lineTo(newMousePosition.x, newMousePosition.y);\n\t\t\tcontext.closePath();\n\t\t\tcontext.stroke();\n\n\t\t\tlet tmpr: Record = {ox : originalMousePosition.x, oy: originalMousePosition.y,\n\t\t\t\tnx : originalMousePosition.x, ny: originalMousePosition.y,\n\t\t\t\ts: drawingstate ? brushsize : erasersize, c: drawingstate};\n\t\t\tif (undoSteps.length <= undo) {\n\t\t\t\tconst temp: Array<Record> = { ...undoSteps[undo]};\n\t\t\t\tundoSteps.push(temp);\n\t\t\t\tconsole.log(tmpr);\n\t\t\t\tconsole.log(undo);\n\t\t\t\tconsole.log(undoSteps[undo]);\n\t\t\t\t(undoSteps[undo]).push(tmpr);\n\t\t\t}\n\t\t\t(undoSteps[undo]).push(tmpr);\n\t\t}\n\t};\n\n\tconst startPaint = useCallback((event: MouseEvent) => {\n\t\tconst coordinates = getCoordinates(event);\n\t\tif (coordinates) {\n\t\t\tsetIsPainting(true);\n\t\t\tsetMousePosition(coordinates);\n\t\t}\n\t}, []);\n\n\tconst paint = useCallback(\n\t\t(event: MouseEvent) => {\n\t\t\tevent.preventDefault();   // drag 방지\n\t\t\tevent.stopPropagation();  // drag 방지\n\n\t\t\tif (isPainting) {\n\t\t\t\tconst newMousePosition = getCoordinates(event);\n\t\t\t\tif (mousePosition && newMousePosition) {\n\t\t\t\t\tdrawLine(mousePosition, newMousePosition);\n\t\t\t\t\tsetMousePosition(newMousePosition);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[isPainting, mousePosition]\n\t);\n\n\tconst exitPaint = useCallback(() => {\n\t\tsetIsPainting(false);\n\t\tsetUndo(undo + 1);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (isPainting) { return; }\n\t\tif (realtime === true) { fetchImage(); };\n\t}, [isPainting]);\n\n\tuseEffect(() => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.fillStyle = \"white\";  // 선 색깔\n\t\t\tcontext.fillRect(0, 0, 512, 512);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (!canvasRef.current) { return; }\n\t\tconst canvas: HTMLCanvasElement = canvasRef.current;\n\t\tcanvas.addEventListener('mousedown', startPaint);\n\t\tcanvas.addEventListener('mousemove', paint);\n\t\tcanvas.addEventListener('mouseup', exitPaint);\n\t\tcanvas.addEventListener('mouseleave', exitPaint);\n\n\t\treturn () => {\n\t\t\t// Unmount 시 이벤트 리스터 제거\n\t\t\tcanvas.removeEventListener('mousedown', startPaint);\n\t\t\tcanvas.removeEventListener('mousemove', paint);\n\t\t\tcanvas.removeEventListener('mouseup', exitPaint);\n\t\t\tcanvas.removeEventListener('mouseleave', exitPaint);\n\t\t};\n\t}, [startPaint, paint, exitPaint]);\n\n\treturn (\n\t\t<div className=\"canvasBlock\">\n\t\t\t<canvas ref={canvasRef} height={height} width={width} className=\"canvas\"/>\n\t\t\t{background ? <div className='background'></div> : null}\n\t\t</div>\n\t);\n}\n\nCanvas.defaultProps = {\n\twidth: 512,\n\theight: 512\n};\n\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}